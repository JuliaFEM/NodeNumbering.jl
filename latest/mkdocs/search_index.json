{
    "docs": [
        {
            "location": "/", 
            "text": "NodeNumbering.jl documentation\n\n\n\n\nNodeNumbering.jl documentation\n\n\nConstants\n\n\nFunctions\n\n\nIndex\n\n\n\n\n\n\n\n\n\n\nConstants\n\n\n#\n\n\nNodeNumbering.element_adjacencies\n \n \nConstant\n.\n\n\nelement_adjacencies\n\n\n\n\nThe Dict shows some element types and their node adjacencies. For example the element type Quad4 has four nodes/element so that node No. 1 is adjacent to nodes 2 and 4 etc.\n\n\nsource\n\n\n\n\nFunctions\n\n\n#\n\n\nNodeNumbering.create_RCM_adjacency\n \n \nMethod\n.\n\n\ncreate_RCM_adjacency(adjacency::Dict{Int, Vector{Int}}, finalorder::Dict{Int, Int})\n\n\n\n\nCreate an adjacency Dict of the RCM ordered nodes. A part of the Reverse Cuthill-McKee Algorithm.\n\n\nExamples\n\n\njulia\n adjacency = Dict{Int, Vector{Int}}(\n                   1 =\n [3, 8, 9],\n                   2 =\n [3, 8, 7, 6],\n                   3 =\n [1, 2],\n                   4 =\n [8, 9],\n                   5 =\n [7, 8],\n                   6 =\n [2, 7],\n                   7 =\n [5, 2, 6],\n                   8 =\n [1, 2, 4, 5],\n                   9 =\n [1, 4]);\n\njulia\n finalorder =  Dict{Int, Int}(\n                     7 =\n 2,\n                     9 =\n 9,\n                     4 =\n 8,\n                     2 =\n 3,\n                     3 =\n 5,\n                     5 =\n 4,\n                     8 =\n 6,\n                     6 =\n 1,\n                     1 =\n 7);\n\njulia\n create_RCM_adjacency(adjacency, finalorder)\nDict{Int64,Array{Int64,1}} with 9 entries:\n  7 =\n [5, 6, 9]\n  9 =\n [7, 8]\n  4 =\n [2, 6]\n  2 =\n [4, 3, 1]\n  3 =\n [5, 6, 2, 1]\n  8 =\n [6, 9]\n  5 =\n [7, 3]\n  6 =\n [7, 3, 8, 4]\n  1 =\n [3, 2]\n\n\n\n\n\nReferences\n\n\n\n\nWikipedia contributors. \"Adjacency list\". Wikipedia, The Free Encyclopedia. Wikipedia, The Free Encyclopedia, 7 Jun. 2017. Web. 17 Jul. 2017. https://en.wikipedia.org/wiki/Adjacency_list\n\n\n\n\nsource\n\n\n#\n\n\nNodeNumbering.renumbering\n \n \nMethod\n.\n\n\nrenumbering(neworder::Array{Int})\n\n\n\n\nRenumber the RCM ordered nodes. A part of the Reverse Cuthill-McKee Algorithm.\n\n\nExamples\n\n\njulia\n neworder = Int[6, 7, 2, 5, 3, 8, 1, 4, 9];\n\njulia\n renumbering(neworder)\nDict{Int64,Int64} with 9 entries:\n  7 =\n 2\n  9 =\n 9\n  4 =\n 8\n  2 =\n 3\n  3 =\n 5\n  5 =\n 4\n  8 =\n 6\n  6 =\n 1\n  1 =\n 7\n\n\n\n\n\nReferences\n\n\n\n\nWikipedia contributors. \"Cuthill\u2013McKee algorithm\". Wikipedia, The Free Encyclopedia. Wikipedia, The Free Encyclopedia, 11 Jul. 2017. Web. 20 Jul. 2017. https://en.wikipedia.org/wiki/Cuthill%E2%80%93McKee_algorithm\n\n\n\n\nsource\n\n\n#\n\n\nNodeNumbering.node_degrees\n \n \nMethod\n.\n\n\nnode_degrees(adjacency::Dict{Int, Vector{Int}})\n\n\n\n\nCalculate the degrees for the adjacency graph nodes. Node degree = number of nodes a certain node is adjacent to.\n\n\nExamples\n\n\njulia\n adjacency = Dict{Int, Vector{Int}}(\n                   1 =\n [3, 8, 9],\n                   2 =\n [3, 8, 7],\n                   3 =\n [1, 2],\n                   4 =\n [8, 9],\n                   5 =\n [7, 8],\n                   6 =\n [2, 7],\n                   7 =\n [5, 2, 6],\n                   8 =\n [1, 2, 4, 5],\n                   9 =\n [1, 4]);\n\njulia\n node_degrees(adjacency::Dict{Int, Vector{Int}})\nDict{Int64,Int64} with 9 entries:\n  7 =\n 3\n  4 =\n 2\n  9 =\n 2\n  2 =\n 3\n  3 =\n 2\n  5 =\n 2\n  8 =\n 4\n  6 =\n 2\n  1 =\n 3\n\n\n\n\n\nReferences\n\n\n\n\nWikipedia contributors. \"Degree (graph theory)\". Wikipedia, The Free Encyclopedia. 24 Nov. 2016. Web. 18 Jul. 2017. https://en.wikipedia.org/wiki/Degree_(graph_theory)\n\n\n\n\nsource\n\n\n#\n\n\nNodeNumbering.calculate_bandwidth\n \n \nMethod\n.\n\n\ncalculate_bandwidth(G::Dict{Int, Vector{Int}})\n\n\n\n\nCalculate bandwidth of graph \nG\n. The bandwidth of the matrix is number \nk\n such that \nA_{ij} = 0\n if \n|i-j| > k\n.\n\n\nExamples\n\n\njulia\n G = Dict(\n           1 =\n [3, 8, 9],\n           2 =\n [3, 8, 7],\n           3 =\n [1, 2],\n           4 =\n [8, 9],\n           5 =\n [7, 8],\n           6 =\n [2, 7],\n           7 =\n [5, 2, 6],\n           8 =\n [1, 2, 4, 5],\n           9 =\n [1, 4]);\n\njulia\n calculate_bandwidth(G)\n17\n\n\n\n\n\nReferences\n\n\n\n\nWikipedia contributors. \"Band matrix.\" Wikipedia, The Free Encyclopedia. Wikipedia, The Free Encyclopedia, 28 Apr. 2017. Web. 15 Jul. 2017. https://en.wikipedia.org/wiki/Band_matrix.\n\n\n\n\nsource\n\n\n#\n\n\nNodeNumbering.RCM\n \n \nMethod\n.\n\n\nRCM(adjacency::Dict{Int, Vector{Int}}, degrees::Dict{Int, Int}, P::Int)\n\n\n\n\nCalculate the Reverse Cuthill-McKee Algorithm for the adjacency graph.\n\n\nExamples\n\n\njulia\n adjacency = Dict(\n                   1 =\n [3, 8, 9],\n                   2 =\n [3, 8, 7],\n                   3 =\n [1, 2],\n                   4 =\n [8, 9],\n                   5 =\n [7, 8],\n                   6 =\n [2, 7],\n                   7 =\n [5, 2, 6],\n                   8 =\n [1, 2, 4, 5],\n                   9 =\n [1, 4]);\n\njulia\n degrees = Dict(\n                 1 =\n 3,\n                 2 =\n 4,\n                 3 =\n 2,\n                 4 =\n 2,\n                 5 =\n 2,\n                 6 =\n 2,\n                 7 =\n 3,\n                 8 =\n 4,\n                 9 =\n 2);\n\njulia\n P = 9;\n\njulia\n RCM(adjacency, degrees, P)\n9-element Array{Int64,1}:\n 6\n 7\n 2\n 5\n 3\n 8\n 1\n 4\n 9\n\n\n\n\n\nReferences\n\n\n\n\nWikipedia contributors. \"Cuthill\u2013McKee algorithm\". Wikipedia, The Free Encyclopedia. Wikipedia, The Free Encyclopedia, 11 Jul. 2017. Web. 17 Jul. 2017. https://en.wikipedia.org/wiki/Cuthill%E2%80%93McKee_algorithm\n\n\n\n\nsource\n\n\n#\n\n\nNodeNumbering.create_adjacency_graph\n \n \nMethod\n.\n\n\ncreate_adjacency_graph(elements::Dict{Int, Vector{Int}}, element_types::Dict{Int, Symbol})\n\n\n\n\nCreate a Dict that shows all nodes and their adjacencies.\n\n\nExamples\n\n\njulia\n elements = Dict(\n                  1 =\n [9, 1, 8, 4],\n                  2 =\n [1, 3, 2, 8],\n                  3 =\n [8, 2, 7, 5],\n                  4 =\n [2, 6, 7]);\n\njulia\n element_types = Dict(\n                       1 =\n :Quad4,\n                       2 =\n :Quad4,\n                       3 =\n :Quad4,\n                       4 =\n :Tri3);\n\njulia\n create_adjacency_graph(elements, element_types)\nDict{Int64,Array{Int64,1}} with 9 entries:\n  7 =\n [2, 6, 5]\n  9 =\n [1, 4]\n  4 =\n [9, 8]\n  2 =\n [6, 7, 3, 8]\n  3 =\n [1, 2]\n  8 =\n [1, 2, 5, 4]\n  5 =\n [8, 7]\n  6 =\n [2, 7]\n  1 =\n [3, 8, 9]\n\n\n\n\n\nReferences\n\n\n\n\nWikipedia contributors. \"Adjacency list\". Wikipedia, The Free Encyclopedia. Wikipedia, The Free Encyclopedia, 7 Jun. 2017. Web. 17 Jul. 2017. https://en.wikipedia.org/wiki/Adjacency_list\n\n\n\n\nsource\n\n\n\n\nIndex\n\n\n\n\nNodeNumbering.element_adjacencies\n\n\nNodeNumbering.RCM\n\n\nNodeNumbering.calculate_bandwidth\n\n\nNodeNumbering.create_RCM_adjacency\n\n\nNodeNumbering.create_adjacency_graph\n\n\nNodeNumbering.node_degrees\n\n\nNodeNumbering.renumbering", 
            "title": "Home"
        }, 
        {
            "location": "/#nodenumberingjl-documentation", 
            "text": "NodeNumbering.jl documentation  Constants  Functions  Index", 
            "title": "NodeNumbering.jl documentation"
        }, 
        {
            "location": "/#constants", 
            "text": "#  NodeNumbering.element_adjacencies     Constant .  element_adjacencies  The Dict shows some element types and their node adjacencies. For example the element type Quad4 has four nodes/element so that node No. 1 is adjacent to nodes 2 and 4 etc.  source", 
            "title": "Constants"
        }, 
        {
            "location": "/#functions", 
            "text": "#  NodeNumbering.create_RCM_adjacency     Method .  create_RCM_adjacency(adjacency::Dict{Int, Vector{Int}}, finalorder::Dict{Int, Int})  Create an adjacency Dict of the RCM ordered nodes. A part of the Reverse Cuthill-McKee Algorithm.  Examples  julia  adjacency = Dict{Int, Vector{Int}}(\n                   1 =  [3, 8, 9],\n                   2 =  [3, 8, 7, 6],\n                   3 =  [1, 2],\n                   4 =  [8, 9],\n                   5 =  [7, 8],\n                   6 =  [2, 7],\n                   7 =  [5, 2, 6],\n                   8 =  [1, 2, 4, 5],\n                   9 =  [1, 4]);\n\njulia  finalorder =  Dict{Int, Int}(\n                     7 =  2,\n                     9 =  9,\n                     4 =  8,\n                     2 =  3,\n                     3 =  5,\n                     5 =  4,\n                     8 =  6,\n                     6 =  1,\n                     1 =  7);\n\njulia  create_RCM_adjacency(adjacency, finalorder)\nDict{Int64,Array{Int64,1}} with 9 entries:\n  7 =  [5, 6, 9]\n  9 =  [7, 8]\n  4 =  [2, 6]\n  2 =  [4, 3, 1]\n  3 =  [5, 6, 2, 1]\n  8 =  [6, 9]\n  5 =  [7, 3]\n  6 =  [7, 3, 8, 4]\n  1 =  [3, 2]  References   Wikipedia contributors. \"Adjacency list\". Wikipedia, The Free Encyclopedia. Wikipedia, The Free Encyclopedia, 7 Jun. 2017. Web. 17 Jul. 2017. https://en.wikipedia.org/wiki/Adjacency_list   source  #  NodeNumbering.renumbering     Method .  renumbering(neworder::Array{Int})  Renumber the RCM ordered nodes. A part of the Reverse Cuthill-McKee Algorithm.  Examples  julia  neworder = Int[6, 7, 2, 5, 3, 8, 1, 4, 9];\n\njulia  renumbering(neworder)\nDict{Int64,Int64} with 9 entries:\n  7 =  2\n  9 =  9\n  4 =  8\n  2 =  3\n  3 =  5\n  5 =  4\n  8 =  6\n  6 =  1\n  1 =  7  References   Wikipedia contributors. \"Cuthill\u2013McKee algorithm\". Wikipedia, The Free Encyclopedia. Wikipedia, The Free Encyclopedia, 11 Jul. 2017. Web. 20 Jul. 2017. https://en.wikipedia.org/wiki/Cuthill%E2%80%93McKee_algorithm   source  #  NodeNumbering.node_degrees     Method .  node_degrees(adjacency::Dict{Int, Vector{Int}})  Calculate the degrees for the adjacency graph nodes. Node degree = number of nodes a certain node is adjacent to.  Examples  julia  adjacency = Dict{Int, Vector{Int}}(\n                   1 =  [3, 8, 9],\n                   2 =  [3, 8, 7],\n                   3 =  [1, 2],\n                   4 =  [8, 9],\n                   5 =  [7, 8],\n                   6 =  [2, 7],\n                   7 =  [5, 2, 6],\n                   8 =  [1, 2, 4, 5],\n                   9 =  [1, 4]);\n\njulia  node_degrees(adjacency::Dict{Int, Vector{Int}})\nDict{Int64,Int64} with 9 entries:\n  7 =  3\n  4 =  2\n  9 =  2\n  2 =  3\n  3 =  2\n  5 =  2\n  8 =  4\n  6 =  2\n  1 =  3  References   Wikipedia contributors. \"Degree (graph theory)\". Wikipedia, The Free Encyclopedia. 24 Nov. 2016. Web. 18 Jul. 2017. https://en.wikipedia.org/wiki/Degree_(graph_theory)   source  #  NodeNumbering.calculate_bandwidth     Method .  calculate_bandwidth(G::Dict{Int, Vector{Int}})  Calculate bandwidth of graph  G . The bandwidth of the matrix is number  k  such that  A_{ij} = 0  if  |i-j| > k .  Examples  julia  G = Dict(\n           1 =  [3, 8, 9],\n           2 =  [3, 8, 7],\n           3 =  [1, 2],\n           4 =  [8, 9],\n           5 =  [7, 8],\n           6 =  [2, 7],\n           7 =  [5, 2, 6],\n           8 =  [1, 2, 4, 5],\n           9 =  [1, 4]);\n\njulia  calculate_bandwidth(G)\n17  References   Wikipedia contributors. \"Band matrix.\" Wikipedia, The Free Encyclopedia. Wikipedia, The Free Encyclopedia, 28 Apr. 2017. Web. 15 Jul. 2017. https://en.wikipedia.org/wiki/Band_matrix.   source  #  NodeNumbering.RCM     Method .  RCM(adjacency::Dict{Int, Vector{Int}}, degrees::Dict{Int, Int}, P::Int)  Calculate the Reverse Cuthill-McKee Algorithm for the adjacency graph.  Examples  julia  adjacency = Dict(\n                   1 =  [3, 8, 9],\n                   2 =  [3, 8, 7],\n                   3 =  [1, 2],\n                   4 =  [8, 9],\n                   5 =  [7, 8],\n                   6 =  [2, 7],\n                   7 =  [5, 2, 6],\n                   8 =  [1, 2, 4, 5],\n                   9 =  [1, 4]);\n\njulia  degrees = Dict(\n                 1 =  3,\n                 2 =  4,\n                 3 =  2,\n                 4 =  2,\n                 5 =  2,\n                 6 =  2,\n                 7 =  3,\n                 8 =  4,\n                 9 =  2);\n\njulia  P = 9;\n\njulia  RCM(adjacency, degrees, P)\n9-element Array{Int64,1}:\n 6\n 7\n 2\n 5\n 3\n 8\n 1\n 4\n 9  References   Wikipedia contributors. \"Cuthill\u2013McKee algorithm\". Wikipedia, The Free Encyclopedia. Wikipedia, The Free Encyclopedia, 11 Jul. 2017. Web. 17 Jul. 2017. https://en.wikipedia.org/wiki/Cuthill%E2%80%93McKee_algorithm   source  #  NodeNumbering.create_adjacency_graph     Method .  create_adjacency_graph(elements::Dict{Int, Vector{Int}}, element_types::Dict{Int, Symbol})  Create a Dict that shows all nodes and their adjacencies.  Examples  julia  elements = Dict(\n                  1 =  [9, 1, 8, 4],\n                  2 =  [1, 3, 2, 8],\n                  3 =  [8, 2, 7, 5],\n                  4 =  [2, 6, 7]);\n\njulia  element_types = Dict(\n                       1 =  :Quad4,\n                       2 =  :Quad4,\n                       3 =  :Quad4,\n                       4 =  :Tri3);\n\njulia  create_adjacency_graph(elements, element_types)\nDict{Int64,Array{Int64,1}} with 9 entries:\n  7 =  [2, 6, 5]\n  9 =  [1, 4]\n  4 =  [9, 8]\n  2 =  [6, 7, 3, 8]\n  3 =  [1, 2]\n  8 =  [1, 2, 5, 4]\n  5 =  [8, 7]\n  6 =  [2, 7]\n  1 =  [3, 8, 9]  References   Wikipedia contributors. \"Adjacency list\". Wikipedia, The Free Encyclopedia. Wikipedia, The Free Encyclopedia, 7 Jun. 2017. Web. 17 Jul. 2017. https://en.wikipedia.org/wiki/Adjacency_list   source", 
            "title": "Functions"
        }, 
        {
            "location": "/#index", 
            "text": "NodeNumbering.element_adjacencies  NodeNumbering.RCM  NodeNumbering.calculate_bandwidth  NodeNumbering.create_RCM_adjacency  NodeNumbering.create_adjacency_graph  NodeNumbering.node_degrees  NodeNumbering.renumbering", 
            "title": "Index"
        }
    ]
}